# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'vs2017-win2016'

variables:
  region: "us-east-1"

steps:
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  displayName: 'Install Terraform 0.13.5'
  inputs:
    terraformVersion: 0.13.5

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: 'Terraform : init'
  inputs:
    provider: aws
    workingDirectory: "$(System.DefaultWorkingDirectory)"
    backendServiceAWS: "AWS-Terraform"
    backendAWSBucketName: "skundu-terraform-remote-state"
    backendAWSKey: "tf/ADO-TF-AWSS3-Int/terraform.tfstate"


- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: 'Terraform : plan'
  inputs:
    provider: aws
    command: plan
    workingDirectory: "$(System.DefaultWorkingDirectory)"
    commandOptions: '-var "region=$(region)" -out "demo.tfplan"'
    environmentServiceNameAWS: "AWS-Terraform"
    backendServiceAWS: "AWS-Terraform"
    backendAWSBucketName: "skundu-terraform-remote-state"
    backendAWSKey: "tf/ADO-TF-AWSS3-Int/terraform.tfstate"

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: 'Terraform : validate and apply'
  inputs:
    provider: aws
    command: apply
    workingDirectory: "$(System.DefaultWorkingDirectory)"
    commandOptions: 'demo.tfplan'
    environmentServiceNameAWS: "AWS-Terraform"
    backendServiceAWS: "AWS-Terraform"
    backendAWSBucketName: "skundu-terraform-remote-state"
    backendAWSKey: "tf/ADO-TF-AWSS3-Int/terraform.tfstate"